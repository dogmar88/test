import sys
import math

class Point(list):
	def __init__(self,x,y):
	  self.x=x
	  self.y=y

class Segment(list):
  def __init__(self,x,y):
    self.p1 = x
    self.p2 = y
    self.length=(((self.p2.x - self.p1.x)**2) + ((self.p2.y - self.p1.y) ** 2)) ** 0.5

  def checkpoint(self,p):
    print (p.x)
    print (p.y)
    seg1 = Segment(self.p1, p)	
    seg2 = Segment(p, self.p2)
    if self.length == seg1.length + seg2.length: return True
    else: return False

class Figure(list):
  def __init__(self,a, b, c, d):
    self.a = a
    self.b = b
    self.c = c
    self.d = d
    self.e = Segment(a,b)
    self.f = Segment(b,c)
    self.g = Segment(c,d)
    self.h = Segment(d,a)

  def pointInside(self,point):
    figure_x = [self.a.x, self.b.x, self.c.x, self.d.x]
    figure_y = [self.a.y, self.b.y, self.c.y, self.d.y]
    c = False
    j = 3
    for i in range(4):
      if ((((figure_y[i] <= point.y) and (point.y < figure_y[j])) or ((figure_y[j] <= point.y) and (point.y < figure_y[i]))) and (point.x > (figure_x[j] - figure_x[i]) * (point.y - figure_y[i]) / (figure_y[j] - figure_y[i]) + figure_x[i])):
        c = True
        j = i
    return c

def whereThePoint (figure, point):
    if point.x == a.x and point.y == a.y or point.x == b.x and point.y == b.y or point.x == c.x and point.y == b.y or point == d.x and point.y == d.y:
      return 0
    if figure.e.checkpoint(point)==True or figure.f.checkpoint(point)==True or figure.g.checkpoint(point)==True or figure.h.checkpoint(point)==True:
      return 1
    if figure.pointInside(point):
      return 2
    return 3

inp=open(sys.argv[1],'r')
a=[]
for i in inp:
      a.append(i.strip().split())
print (a)
a=Point(14.0,4.0)
b=Point(19.0,9.0)
c=Point(14.0,19.0)
d=Point(4.0,14.0)
e=Figure(a,b,c,d)
test=Point(11.0,7.0)
print (e.pointInside(test))
print (whereThePoint(e,test))